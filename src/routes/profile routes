
const express = require('express');
const router = express.Router();
const JobSeeker = require('../models/JobSeeker');
const { protect, authorize } = require('../middleware/auth');

// @route   POST /api/profile/job-seeker
// @desc    Create/Update job seeker profile
// @access  Private (Job Seekers only)
router.post('/job-seeker', protect, authorize('job_seeker'), async (req, res) => {
  try {
    let profile = await JobSeeker.findOne({ userId: req.user.id });
    
    if (profile) {
      profile = await JobSeeker.findOneAndUpdate(
        { userId: req.user.id },
        { ...req.body, updatedAt: Date.now() },
        { new: true, runValidators: true }
      );
    } else {
      profile = await JobSeeker.create({
        userId: req.user.id,
        ...req.body
      });
    }

    res.json({
      success: true,
      profile
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// @route   GET /api/profile/job-seeker
// @desc    Get job seeker profile
// @access  Private
router.get('/job-seeker', protect, async (req, res) => {
  try {
    const profile = await JobSeeker.findOne({ userId: req.user.id })
      .populate('userId', 'email profile');

    if (!profile) {
      return res.status(404).json({
        success: false,
        error: 'Profile not found'
      });
    }

    res.json({
      success: true,
      profile
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// @route   GET /api/profile/job-seeker/:id
// @desc    Get specific job seeker profile (for employers)
// @access  Private (Employers only)
router.get('/job-seeker/:id', protect, authorize('employer'), async (req, res) => {
  try {
    const profile = await JobSeeker.findOne({ userId: req.params.id })
      .populate('userId', 'email profile');

    if (!profile) {
      return res.status(404).json({
        success: false,
        error: 'Profile not found'
      });
    }

    res.json({
      success: true,
      profile
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;
