const express = require('express');
const router = express.Router();
const JobSeeker = require('../models/JobSeeker');
const { protect, authorize } = require('../middleware/auth');
// Add Joi or express-validator for extra validation

// Example for creating/updating to support new fields
router.post('/job-seeker', protect, authorize('job_seeker'), async (req, res) => {
  try {
    const data = req.body;
    let jobSeeker = await JobSeeker.findOne({ userId: req.user.id });

    const newProfile = {
      name: data.name || 'Default Profile',
      description: data.description,
      skills: data.skills,
      experience: data.experience,
      education: data.education,
      certifications: data.certifications,
      projects: data.projects,
      portfolioLinks: data.portfolioLinks,
      socialLinks: data.socialLinks,
      languages: data.languages,
      interests: data.interests,
      desiredJobTypes: data.desiredJobTypes,
      desiredSalary: data.desiredSalary,
      preferredLocations: data.preferredLocations,
      remotePreference: data.remotePreference,
      profileImage: data.profileImage,
      isActive: true,
      createdAt: Date.now()
    };

    if (!jobSeeker) {
      jobSeeker = await JobSeeker.create({
        userId: req.user.id,
        profiles: [newProfile]
      });
    } else {
      if (jobSeeker.profiles.length >= 5) {
        return res.status(400).json({ success: false, error: 'Maximum 5 profile versions allowed. Delete one to add new.' });
      }
      // Deactivate all other profiles
      jobSeeker.profiles.forEach(p => p.isActive = false);
      jobSeeker.profiles.push(newProfile);
      await jobSeeker.save();
    }

    res.json({
      success: true,
      jobSeeker,
      profileCompletion: newProfile.getCompletion()
    });
  } catch (error) {
    res.status(400).json({ success: false, error: error.message });
  }
});

// ... All other routes (GET, PUT, DELETE, ACTIVATE, DUPLICATE) need to be updated similarly to pass/return new fields

// GET all profiles + active
router.get('/job-seeker', protect, async (req, res) => {
  try {
    const jobSeeker = await JobSeeker.findOne({ userId: req.user.id }).populate('userId', 'email profile');
    if (!jobSeeker) return res.status(404).json({ success: false, error: 'No profiles found.' });
    const active = jobSeeker.getActiveProfile();
    res.json({
      success: true,
      jobSeeker,
      activeProfile: active,
      profileCompletion: active?.getCompletion()
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// Add upload endpoint for profileImage if desired using Multer middleware

module.exports = router;
